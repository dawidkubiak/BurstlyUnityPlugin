#!/usr/bin/python

import sys
import os



# Constants
FRAMEWORK_NAME = 0
FRAMEWORK_ID = 1
FRAMEWORK_FILEREFID = 2

LIBRARY_NAME = 0
LIBRARY_ID = 1
LIBRARY_FILEREFID = 2
LIBRARY_LASTKNOWNTYPE = 3
LIBRARY_BASEPATH = 4


# Adds a line into the PBXBuildFile section
def add_build_file(pbxproj, id, name, fileref):
    subsection = 'Resources'
    if name[-9:] == 'framework':
        subsection = 'Frameworks'
    print "Adding build file " + name + '\n'
    pbxproj.write('\t\t' + id + ' /* ' + name  + ' in ' + subsection + ' */ = {isa = PBXBuildFile; fileRef = ' + fileref +  ' /* ' + name + ' */; };\n')

#Adds a line to the PBXFileReference to add a file
def add_res_file_reference(pbxproj, id, name, last_known_file_type, base_path):
	print "Adding data file reference " + name + "\n"
	pbxproj.write('\t\t' + id + ' /* ' + name + ' */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = ' + last_known_file_type + '; name = ' + name + '; path = ' + base_path + name + '; sourceTree = \"<group>\"; };\n')


# Adds a line into the PBXFileReference section to add a framework
def add_framework_file_reference(pbxproj, id, name):
    print "Adding framework file reference " + name + '\n'
    pbxproj.write('\t\t' + id + ' /* ' + name + ' */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = ' + name + '; path = System/Library/Frameworks/' + name + '; sourceTree = SDKROOT; };\n')


# Adds a line into the PBXFrameworksBuildPhase section
def add_frameworks_build_phase(pbxproj, id, name):
    print "Adding build phase " + name + '\n'
    pbxproj.write('\t\t\t\t' + id + ' /* ' + name + ' in Frameworks */,\n')


# Adds a line into the PBXResourcesBuildPhase section
def add_resources_build_phase(pbxproj, id, name):
    print "Adding build phase " + name + '\n'
    pbxproj.write('\t\t\t\t' + id + ' /* ' + name + ' in Resources */,\n')


# Adds a line into the PBXGroup section
def add_group(pbxproj, id, name):
	print "Add group " + name + '\n'
	pbxproj.write('\t\t\t\t' + id + ' /* ' + name + ' */,\n')


# Returns a list of all the files already in a pbxproj
#    lines - a list of all the lines read in from a pbxproj
def read_existing_files(lines):
    begin_pbxbuildfile_section = False
    existing_files = []
    i = 0
    line = lines[i]
    while line[3:6] != 'End':
        if not begin_pbxbuildfile_section:
            begin_pbxbuildfile_section = (line[3:21] == 'Begin PBXBuildFile')
        else:
            existing_files.append(line.split()[2])
        i = i + 1
        line = lines[i]

    return existing_files


# Processes the given xcode project to add or change the supplied parameters
#   xcodeproj_filename - filename of the Xcode project to change
#   frameworks - list of Apple standard frameworks to add to the project
#   libraries - list libraries added to the project
def process_pbxproj(xcodeproj_filename, frameworks, libraries, linkerFlags):

    # Open up the file generated by Unity and read into memory as
    # a list of lines for processing
    pbxproj_filename = xcodeproj_filename + '/project.pbxproj'
    pbxproj = open(pbxproj_filename, 'r')
    lines = pbxproj.readlines()
    pbxproj.close()

    # Next open up an empty project.pbxproj for writing and iterate over the old
    # file copying the original file and inserting anything extra we need
    pbxproj = open(pbxproj_filename, 'w')

    # As we iterate through the list we'll record which section of the
    # project.pbxproj we are currently in
    section = ''

    # We use these booleans to decide whether we have already added the list of
    # build files to the link line.  This is needed because there could be multiple
    # build targets and they are not named in the project.pbxproj
    frameworks_build_added = False
    res_build_added = False

    # Build a list of the files already added to the project.  Then use it to
    # avoid adding anything to the project twice
    existing_files = read_existing_files(lines)
    filtered_frameworks = []
    for framework in frameworks:
        if framework[0] not in existing_files:
            filtered_frameworks.append(framework)
    frameworks = filtered_frameworks
    for library in libraries:
        if library[0] in existing_files:
            libraries.remove(library)
    
   
    # Now iterate through the project adding any new lines where needed
    i = 0
    for i in range(0, len(lines)):
        line = lines[i]
        pbxproj.write(line)

        # Each section starts with a comment such as
        # /* Begin PBXBuildFile section */'
        if line[3:8] == 'Begin':
            section = line.split(' ')[2]
            if section == 'PBXBuildFile':
                for framework in frameworks:
                    add_build_file(pbxproj, framework[FRAMEWORK_ID], framework[FRAMEWORK_NAME], framework[FRAMEWORK_FILEREFID])
                for library in libraries:
                    add_build_file(pbxproj, library[LIBRARY_ID], library[LIBRARY_NAME], library[LIBRARY_FILEREFID])

            if section == 'PBXFileReference':
                for framework in frameworks:
                    add_framework_file_reference(pbxproj, framework[FRAMEWORK_FILEREFID], framework[FRAMEWORK_NAME])
                for library in libraries:
                	add_res_file_reference(pbxproj, library[LIBRARY_FILEREFID], library[LIBRARY_NAME], library[LIBRARY_LASTKNOWNTYPE], library[LIBRARY_BASEPATH])
    
        if line[3:6] == 'End':
            section = ''
   
   		# The PBXFrameworksBuildPhase corresponds to 'Link Binary With Libraries' in XCode.
   		# We need to add both the frameworks as well as the static libraries.
        if section == 'PBXFrameworksBuildPhase':
            if line.strip()[0:5] == 'files':
                if not frameworks_build_added:
                    for framework in frameworks:
                        add_frameworks_build_phase(pbxproj, framework[FRAMEWORK_ID], framework[FRAMEWORK_NAME])
                    frameworks_build_added = True

                # Moved from below. We want XCode to link libBurstly.a in the traditional way
                if not res_build_added:
                    for library in libraries:
                    	add_resources_build_phase(pbxproj, library[LIBRARY_ID], library[LIBRARY_NAME])
                    res_build_added = True

        # PBXGroup is just a group of file references, and essentially corresponds to a Folder in the project. 
        if section == 'PBXGroup':
            if (line.strip()[0:8] == 'children') and (lines[i-2].strip().split(' ')[2] == 'CustomTemplate'):
                for library in libraries:
                    add_group(pbxproj, library[LIBRARY_FILEREFID], library[LIBRARY_NAME])
                for framework in frameworks:
                    add_group(pbxproj, framework[FRAMEWORK_FILEREFID], framework[FRAMEWORK_NAME])

		# Add Other Linker Flags and set the Header Search Paths to include all our files in Libraries/
        if section == 'XCBuildConfiguration':
            if line.strip()[0:13] == 'buildSettings':
                pbxproj.write('\t\t\t\tHEADER_SEARCH_PATHS = \"$(SRCROOT)/Libraries\";\n')
            if line.strip() == 'OTHER_LDFLAGS = (':
            	for flag in linkerFlags:
					pbxproj.write('\t\t\t\t\t\"' + flag + '\",\n')

    pbxproj.close()






def executeCommand(cmd):
	print("..." + cmd);
	os.system(cmd);

def postProcessAndroid():
    
	androidSdkPath = sys.argv[3];

	apkFileName = sys.argv[1];
	publishedFilePath = sys.argv[1].rpartition("/")[0];
	publishedFileName = sys.argv[1].rpartition("/")[2];
	pluginsDirPath = sys.argv[0].rpartition("PostProcessBuildPlayer-Burstly")[0] + "/Plugins/Android";
	tempDirPath = publishedFilePath + "/TEMP-" + publishedFileName;

	executeCommand("rm -rf " + tempDirPath);
	print("Unzipping " + apkFileName + " to " + tempDirPath);
	executeCommand("unzip " + apkFileName + " -d " + tempDirPath);
	# META-INF holds the past code sign metadata. If it is not deleted the install will fail.
	print("Deleting " + tempDirPath + "/META-INF");
	executeCommand("rm -rf " + tempDirPath + "/META-INF");
	print("Copying Burstly SDK assets/ to " + tempDirPath + "/assets");
	executeCommand("cp " + pluginsDirPath + "/assets/* " + tempDirPath + "/assets");
	executeCommand("rm " + tempDirPath + "/assets/*.meta");
	print("Re-zipping APK");
	executeCommand("rm " + apkFileName);
	os.chdir(tempDirPath);
	executeCommand("zip -r " + apkFileName + " `ls " + tempDirPath + "`");
	os.chdir(publishedFilePath);
	print("Removing temporary work folder");
	executeCommand("rm -rf " + tempDirPath);
	print("Signing APK");
	# We only want to use a custom keystore/keyalias if they're passed in by the script
	if (len(sys.argv) == 8 and sys.argv[4] != ""):
		keystoreName = sys.argv[4];
		keystorePassword = sys.argv[5];
		keyaliasName = sys.argv[6];
		keyaliasPassword = sys.argv[7];
		executeCommand("jarsigner -verbose -keystore " + keystoreName + " -storepass " + keystorePassword + " -keypass " + keyaliasPassword + " " + apkFileName + " " + keyaliasName);	
	else:
		# Use the Android debug key if there is not one passed
		executeCommand("jarsigner -verbose -keystore ~/.android/debug.keystore -storepass android -keypass android " + apkFileName + " androiddebugkey");
	print("Aligning APK");
	executeCommand("mv " + apkFileName + " " + apkFileName + ".apk");
	executeCommand(androidSdkPath + "/tools/zipalign -v 4 " + apkFileName + ".apk " + apkFileName);
	executeCommand("rm " + apkFileName + ".apk");
	
	
	
	
	
	
	
def postProcessIOS():
	xcodeprojDirPath = sys.argv[1];
	xcodeprojFilePath = xcodeprojDirPath + '/Unity-iPhone.xcodeproj'
		
	frameworks = [
			["AddressBook.framework", "E68A8F92171DCDF500B313EA", "E68A8F6E171DCDF500B313EA"], \
			["AddressBookUI.framework", "E68A8F93171DCDF500B313EA", "E68A8F6F171DCDF500B313EA"], \
			["AudioToolbox.framework", "E68A8F95171DCDF500B313EA", "E68A8F71171DCDF500B313EA"], \
			["AVFoundation.framework", "E68A8F96171DCDF500B313EA", "E68A8F72171DCDF500B313EA"], \
			["CFNetwork.framework", "E68A8F97171DCDF500B313EA", "E68A8F73171DCDF500B313EA"], \
			["CoreGraphics.framework", "E68A8FB0171DCDF500B313EA", "E68A8F8C171DCDF500B313EA"], \
			["CoreLocation.framework", "E68A8F99171DCDF500B313EA", "E68A8F75171DCDF500B313EA"], \
			["CoreMotion.framework", "E68A8F9A171DCDF500B313EA", "E68A8F76171DCDF500B313EA"], \
			["CoreTelephony.framework", "E68A8F9B171DCDF500B313EA", "E68A8F77171DCDF500B313EA"], \
			["EventKit.framework", "E68A8F9C171DCDF500B313EA", "E68A8F78171DCDF500B313EA"], \
			["EventKitUI.framework", "E68A8F9D171DCDF500B313EA", "E68A8F79171DCDF500B313EA"], \
			["Foundation.framework", "E68A8FAF171DCDF500B313EA", "E68A8F8B171DCDF500B313EA"], \
			["iAd.framework", "E68A8F9F171DCDF500B313EA", "E68A8F7B171DCDF500B313EA"], \
			["MapKit.framework", "E68A8FA0171DCDF500B313EA", "E68A8F7C171DCDF500B313EA"], \
			["MediaPlayer.framework", "E68A8FA1171DCDF500B313EA", "E68A8F7D171DCDF500B313EA"], \
			["MessageUI.framework", "E68A8FA2171DCDF500B313EA", "E68A8F7E171DCDF500B313EA"], \
			["MobileCoreServices.framework", "E68A8FA3171DCDF500B313EA", "E68A8F7F171DCDF500B313EA"], \
			["OpenAL.framework", "E68A8FA4171DCDF500B313EA", "E68A8F80171DCDF500B313EA"], \
			["OpenGLES.framework", "E68A8FAD171DCDF500B313EA", "E68A8F89171DCDF500B313EA"], \
			["QuartzCore.framework", "E68A8FA7171DCDF500B313EA", "E68A8F83171DCDF500B313EA"], \
			["Security.framework", "E68A8FA8171DCDF500B313EA", "E68A8F84171DCDF500B313EA"], \
			["StoreKit.framework", "E68A8FA9171DCDF500B313EA", "E68A8F85171DCDF500B313EA"], \
			["SystemConfiguration.framework", "E68A8FAA171DCDF500B313EA", "E68A8F86171DCDF500B313EA"], \
			["UIKit.framework", "E68A8FAE171DCDF500B313EA", "E68A8F8A171DCDF500B313EA"]
		];

	libraries = [
					["libBurstly.a", "E639836E172090CE00BD0D4E", "E639834A172090CE00BD0D4E", "archive.ar", "Libraries/"]
					];
	    
	linkerFlags = [	
					"-ObjC", \
					"-weak_framework Accounts", \
					"-weak_framework AdSupport", \
    				"-weak_framework PassKit", \
    				"-weak_framework Twitter", \
					"-lsqlite3.0", \
					"-lz", \
					"-lxml2"
					];
	
	process_pbxproj(xcodeprojFilePath, frameworks, libraries, linkerFlags)
	
	# copy files into Libraries/
	librariesDirPath = xcodeprojDirPath + "/Libraries";
	burstlySdkDirPath = sys.argv[0].rpartition("/Editor/PostProcessBuildPlayer_Burstly")[0] + "/Plugins/iOS/BurstlySDK";
	print("Copying Burstly SDK assets/ to " + librariesDirPath);
	executeCommand('cp \"' + burstlySdkDirPath + '\"/*' + ' \"'+librariesDirPath+'\"');





	
print("Running PostProcessBuildPlayer script with the following arguments:");

# Arguments are as follows;
# 0: Full path to this file
# 1: Full path to deployed project (iOS -> folder containing xcodeproj, Android -> path to APK)
# 2: Platform name (android or iPhone)
# 3: Path to Android SDK (if set in Unity)
# 4: Keystore name (path)
# 5: Keystore password
# 6: Key alias name
# 7: Key alias password
	
i = 0
for args in sys.argv:
    print str(i) +": " + args
    i += 1
  
    
    

if sys.argv[2] == "iPhone":
	postProcessIOS();

if sys.argv[2] == "android":
	postProcessAndroid();
